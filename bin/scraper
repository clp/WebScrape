#! /usr/bin/env perl

# scraper  clpoda  2012_0323
# PC-batbug:/home/clpoda/p/WebScrape/bin
# Time-stamp: <Fri 2012 Apr 13 05:29:54 PMPM clpoda>
# Scrape the wsj.com site for letters to the editor
#
# Plan
# Build a release from this experimental code.
# Divide this code into a back-end web scraping module,
# and a program w/ site-specific code & data for wsj.com
# Status
# Fri2012_0323_12:51  Scraper works; now parse the data.
# Thu2012_0329_09:24  Parsing topics OK; get author data OK.
# Fri2012_0330_14:41  Extract each letter & save for analysis.
#   Extract is OK; but no metadata fields are stored for simple
#   retrieval & analysis.
# Wed2012_0404_21:07  Save letter text & metadata into a structure.
# Thu2012_0412_22:07  Fix parse bugs-not separating letters into files properly.
# Fri2012_0413_12:09  Handle letter w/ >1 author correctly.
#
# ---------------------------------------------------------------

# For format of the web page: see codenotes.otl file.

use strict;
use warnings;

#TBD use Carp;
use Data::Dumper;
use File::Path qw(remove_tree make_path);
use File::Slurp;
use Getopt::Long;
use HTML::Element::Library;

#TBD use HTML::Entities;
use HTML::TreeBuilder;

use JSON;
use Log::Log4perl qw(:easy);
use WWW::Mechanize;

#TBD use DateTime;
use DateTime::Format::Natural;
use Try::Tiny;
use feature qw( switch say );

#TBD use autodie ;
#TBD use Storable;
#TBD use IO::Zlib;

my $USE_LOCAL_DATA = 1;    # 1=Do not query web site.
our $VERSION = '0.10';

# Initialize
my $source_name = "wsj";
my $domain_name = "wsj.com";
my $rootdir     = "/home/clpoda";

my $outputdir = "p/WebScrape/data/wsj/lte";    #CFG
my $msg;

# Initialize
my $program = $0;
$program =~ s{\A.*/}{};    # strip leading path, if any
my $now = localtime;
my $dt;
my $total_authors_count;
my $total_letters_count;
my %current_letter = ();
my $author_count   = 0;
my $daily_dir;

#
# Raw data dir, eg, ./, /tmp, /var/tmp, ~/tmp/raw
#ORG my $log_dir = "./";
my $log_dir  = "/home/clpoda/p/WebScrape/log/";
my $log_file = $log_dir . "$program.log";

#TBD # Name the $out_file later; it contains a time stamp.
#TBD my $out_file;
#
my $data_src = "unknown, maybe __DATA__";

# Set up logging.
Log::Log4perl->easy_init(
  {

    #OK level => $INFO,
    #OK level  => $WARN,
    level => $DEBUG,
    file  => ">>$program.log"
  }
);

my $start_url
    = qq{http://online.wsj.com/public/page/letters.html};    #CFG
unless ( GetOptions( 'start_url=s' => \$start_url, ) ) {
  die usage();
}
unless ($start_url) {
  die
      "$program died: No url found in file or on command line.\n\n",
      usage();
}

my $mech = WWW::Mechanize->new();
$mech->agent_alias('Linux Mozilla');

#TBD Based on Index.pm modulino code, Sun2012_0318_16:46: keep or toss?
__PACKAGE__->new->run unless caller;

sub run { #------------------------------------------------------
  my ($application) = @_;
  my $start_time = localtime();

  DEBUG("Started run() at $start_time");

  ##
  ## Initialize --------------------------------------------------
  $total_authors_count = 0;
  $total_letters_count = 0;

  init_dirs( $rootdir, $outputdir );

  ##TMP1 print "   $0: See results at $rootdir/$outputdir when done.\n";
  ##TMP1 print "   $0: See log data at /home/clpoda/p/WebScrape/log/. \n\n";

  ## TBD Use init*dir() sub?
  ##OPT-DBG
  my $raw_dir = "$rootdir/p/WebScrape/data/wsj/tmp";
  if ( -d $raw_dir ) {
    remove_tree($raw_dir);
  }
  make_path($raw_dir);

  ##
  ## Get start page w/ data.  ------------------------------------
  my $start_page;
  my $tree;
  if ($USE_LOCAL_DATA) {
    ## Read the local file into $start_page for correct handling
    ## of raw data, regardless of which branch is taken.
    $start_page = read_file(

    # TST1 "$rootdir/p/WebScrape/data/wsj/wsj.lte.html");
    # TST2 "$rootdir/p/WebScrape/data/wsj/wsj.lte.2authors.raw");
    #FULL
      "$rootdir/p/WebScrape/data/wsj/wsj.lte.full.2011_0408.raw"
    );

#OK "$rootdir/p/WebScrape/data/wsj/wsj.lte.1Letter.1author.data.raw");
#OK "$rootdir/p/WebScrape/data/wsj/wsj.lte.2letters.raw");
#TST "$rootdir/p/WebScrape/data/wsj/wsj.lte.2letters.italics.inside.raw");
    $tree     = HTML::TreeBuilder->new_from_content($start_page);
    $data_src = "local copy of web page";
  }
  else {
    $start_page = get_start_page( $mech, $start_url );
    $tree     = HTML::TreeBuilder->new_from_content($start_page);
    $data_src = "web";
  }

  ##TBD Verify page title: </script><title>Letters - WSJ.com</title>

  ##DBG:
  save_raw_data( $source_name, $raw_dir, $start_page, $tree );

  ##
  ## Parse the response & extract desired data. ------------------
  ##   Select the portion of the page that holds our data.
  ##   Extract each headline & store them in @topics.
  ##   Extract each sibling node from the tree.
  ##   TBD: Parse the text for data: heading, article, letter body, etc.

  ## TBF b.9. serverTime can be one day before printed date of wsj.
  ## Get date of publication.
  ## var serverTime = new Date("April 06, 2012 00:45:28");
  my ($pub_date_raw)
      = $tree->as_HTML =~ qr{serverTime = new Date\("(.*?)"\)};
  say "DBG date: ,$pub_date_raw,";
  my $parser = DateTime::Format::Natural->new();
  $dt = $parser->parse_datetime($pub_date_raw);

  ## TBD Move to where $dt is used?
  if ( $parser->success ) {

    # operate on $dt.
    $daily_dir = initialize_output_dir();
  }
  else {
    warn $parser->error;
  }

  ## Get topic data.
  my @all_letters_to_editor;
  my @topics = extract_topics($tree);

  my $topic_parent = $tree->look_down(
    _tag  => 'div',
    class => "",
  );

  my @lines_under_a_topic;
  my $topic_number = 0;
  my $topic_start;

  ## Loop on each topic. -----------------------------------------
TOPIC:
  foreach (@topics) {
    my $current_topic = $_->{_content}[0];
    $current_topic =~ s/\s+$//;
    say "DBG topic: ", $current_topic;

    ##TBD Make the sub a pattern match? Using the exact heading
    ## may cause a problem.
    ##
    ## Use as_text() method instead of as_HTML(); the latter
    ## caused failures when $topic_start included an apostrophe
    ## that must be escaped (may fail w/ other symbols too).
    $topic_start = $topic_parent->look_down(
      _tag => 'h1',
      sub { $_[0]->as_text =~ qr{$current_topic}i }
    );

    ## TBD Caught problems.  Used for debug; maybe rm it now.
    if ($topic_start) {
      @lines_under_a_topic = $topic_start->siblings;
      $topic_number++;
    }
    else {
      DEBUG
          "\$topic_start not found for \$topic_number: ,$topic_number,";
      $topic_number++;
      next TOPIC;
    }

    my $current_author      = '';
    my $current_letter_text = '';
    my $details;
    my $prior_author = '';
    my $letter_line;

    ## First loop for letters.
LINE:
    while (@lines_under_a_topic) {
      ## Remove lines from the array.
      $letter_line = shift @lines_under_a_topic;

      ## DBG say "DBG LINE block: \$letter_line->as_HTML: ,", $letter_line->as_HTML;
      if ($letter_line) {

        ## DBG Save each line for debug.
        push @all_letters_to_editor,
            { letter_content => $letter_line->as_text };

        ## Save objects for analysis:
        $current_letter_text .= $letter_line->as_text;
      }
      else {
        next LINE;
      }

      ## Second loop for letters.
      ## Extract all author data, then return to LINE loop.
  AUTHOR:
      if ( $letter_line->as_HTML =~ /<b>/ ) {

        ## TBD Thu2012_0412_13:36  Now handle all following lines
        ## as author data, until end of current letter.
        $current_author = $letter_line->as_text;
        say
            "DBG if <b> block  \$current_author: ,$current_author,";
        $current_letter{author}{$current_author}{name}
            = $current_author;

        ## Assume the <b> tag marks end of letter body.
        $current_letter{body}  = $current_letter_text;
        $current_letter{topic} = $current_topic;

        ## Clear the var to prepare for next letter.
        $current_letter_text = '';

        $total_authors_count++;

        ## Loop to get all author data.
        $author_count = 0;
        my $current_line;
        while (@lines_under_a_topic) {
          ## Remove lines from the array.
          $current_line = shift @lines_under_a_topic;

          if ( $current_line->as_HTML =~ /<a/ ) {
            ## Found the end of a letter's author data where
            ## there are multiple letters per topic.

            $total_letters_count++;
            save_letter_to_file( \%current_letter );
            next LINE;
          }

          if ( $current_line->as_HTML =~ /<i>/ ) {
            push @{ $current_letter{author}{$current_author}
                  {details} },
              $current_line->as_text;
          }
          elsif ( $current_line->as_HTML =~ /<b>/ ) {
            if ( $current_line->as_text eq $current_author ) {
              # Ignore the author that was already handled.
              next;
            }

            # Handle the new author for an existing letter.
            $current_author = $current_line->as_text;
            push @{ $current_letter{author}{$current_author}
                  {name} },
                $current_author;

            $total_authors_count++;
            next; # Get data for this new author.
          }
          else {
            # In <b> loop, found line that does not match a, b, or i tags.
            # Assume it marks the end of the letter.
            # Save it, then start to read next letter.
            last;
          }

        }    # End of while (@lines_under_a_topic)

        ## If no more lines are under the topic, save the letter
        ## to a file.  This saves letters under topics w/ only
        ## one letter,
        ## that do not have <a> tags that I use to mark the end
        ## of a letter.
        $total_letters_count++;
        save_letter_to_file( \%current_letter );

        next LINE;
      }    # End of <b> loop.
      else {
        next LINE;
      }

    }    # End LINE loop.
  }    # End TOPIC loop.

  ##---------------------------------------------------------------
  ## Save data from all letters found.
  write_file( "all_letters", "" );
  foreach (@all_letters_to_editor) {
    append_file( "all_letters", { binmode => ':utf8' },
      values %$_ )
        or DEBUG( 'save_letters_data', $!, $source_name );
    append_file( "all_letters", { binmode => ':utf8' }, "\n" );
  }

  ##---------------------------------------------------------------
  ## Print summary stats at end of the program.
  $tree->delete;

  my $done_time = localtime();
  my ($end_msg1);
  $end_msg1
      = "$0\n"
      . "  Using data src ,$data_src, for letters to the editor"
      . " in $source_name.\n"
      . "  Found $total_authors_count authors for"
      . " $total_letters_count letters to the editor\n"
      . "  in $source_name, for web site date $pub_date_raw.\n";

  DEBUG($end_msg1);
  print { $application->{output_fh} } $end_msg1 . "\n";

}    # End of run().

exit 1;

#
#
# Subroutines ---------------------------------------------------
#
#
sub new { #------------------------------------------------------
  my ($class) = @_;
  my $application = bless {}, $class;
  $application->init;
  $application;
}

sub init { #-----------------------------------------------------
  ## TBD Add some or all init code here later.
  my ($application) = @_;
  $application->{output_fh} = \*STDOUT;
}

sub output_fh { #------------------------------------------------
  my ( $application, $fh ) = @_;
  if ($fh) {
    $application->{output_fh} = $fh;
  }
  $application->{output_fh};
}

sub usage { #----------------------------------------------------
  return <<"eousage";
Usage:
  $program -u url

$program requests a web site to return a page, and displays
the HTML data found there.

Options to control the query

-url string              The full http address to retrieve.
                         Required.
eousage
}

sub init_dirs { #------------------------------------------------
  my ( $rootdir, $outputdir ) = @_;
  if ( -d "$rootdir/$outputdir" ) {
    remove_tree("$rootdir/$outputdir");
  }
  make_path("$rootdir/$outputdir");
}

sub get_start_page { #-------------------------------------------
  my ( $mech, $start_url ) = @_;
  my $response;
  try {
    $response = $mech->get($start_url);
  }
  catch {
    my $msg = "ERR: DIE: Caught error while getting web page: $_"
        . "  response->status_line: [$response->status_line].";
    DEBUG( 'NoShow', $msg, $source_name );
    die "ERR: Cannot get web page [$start_url]; try later.";
  };

  if ( !$response->is_success ) {
    my $msg = "Bad response to request for [$start_url]: "
        . $response->status_line;
    DEBUG( 'NoShow', $msg, $source_name );
    die
        "ERR: Got bad response to request for [$start_url]; try later.";
  }
  return $mech->content();
}

## Write each letter to a separate file.
sub save_letter_to_file { #--------------------------------------
  my $ref_current_letter = shift;

  ## TBD Use $author_count until an accurate letter count is avbl.
  $author_count = $total_letters_count;

  ## Add leading zeroes to values used in path, including file name,
  ## to get 2-digit strings.
  for ($author_count) {
    $_ = "0" . $_ if $_ <= 9;
  }

  write_file(
    "./$daily_dir/$author_count",
    { binmode => ':utf8' },
    encode_json($ref_current_letter)
  ) or DEBUG( 'save_one_letter_data', $!, $source_name );
  %current_letter = ();
}

sub save_raw_data { #--------------------------------------------
  my ( $source_name, $raw_dir, $start_page, $tree ) = @_;

  ## Save structured view of web page.
  my $treeout;
  open( $treeout, '>', "$raw_dir/wsj.lte.treedump" );
  binmode $treeout, ':utf8';
  $tree->dump($treeout);
  close($treeout);

  ## Save raw downloaded page & decoded content for debugging.
  my $page_file = "$source_name.lte.raw";
  write_file( "$raw_dir/$page_file", { binmode => ':utf8' },
    $start_page )
      or DEBUG( 'save_raw_data()', $!, $source_name );
  write_file( "tree_builder_dump_as_html", $tree->as_HTML )
      or DEBUG( 'save_raw_data()', $!, $source_name );
  write_file( "tree_builder_dump_as_text",
    { binmode => ':utf8' },
    $tree->as_text )
      or DEBUG( 'save_raw_data()', $!, $source_name );
}

sub extract_topics { #-------------------------------------------
  my $tree   = shift;
  my @topics = $tree->look_down(
    '_tag'  => 'h1',
    'class' => 'boldEighteenTimes',
  );
  ##DBG $Data::Dumper::Maxdepth = 2;    # Value of 2 shows content
  ##DBG say "\nDBG \@topics:";

  ##DBG say Dumper @topics;
  return @topics;
}

## Remove dir if it exists-erase old files so diff gives accurate results.
sub initialize_output_dir {
  my $m = $dt->month;
  my $d = $dt->day;

  ## Add leading zeroes to values used in path, including file name,
  ## to get 2-digit strings.
  for ( $m, $d ) {
    $_ = "0" . $_ if $_ <= 9;
  }

  my $daily_dir = "./wsj/" . $dt->year . "/" . $m . $d;
  if ( -d $daily_dir ) {
    remove_tree($daily_dir);
  }
  make_path($daily_dir);
  return $daily_dir;
}

