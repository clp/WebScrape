#! /usr/bin/env perl

# scraper  clpoda  2012_0323
# PC-batbug:/home/clpoda/p/WebScrape/bin
# Time-stamp: <Fri 2012 Apr 06 12:40:26 PMPM clpoda>
# Scrape the wsj.com site for letters to the editor
#
# Plan
# Build a release from this experimental code.
# Divide this code into a back-end web scraping module,
# and a program w/ site-specific code & data for wsj.com
# Status
# Fri2012_0323_12:51  Scraper works; now parse the data.
# Thu2012_0329_09:24  Parsing topics OK; get author data OK.
# Fri2012_0330_14:41  Extract each letter & save for analysis.
#   Extract is OK; but no metadata fields are stored for simple
#   retrieval & analysis.
# Wed2012_0404_21:07  Save letter text & metadata into a structure.
#
# ---------------------------------------------------------------

# For format of the web page: see codenotes.otl file.

use strict;
use warnings;

#TBD use Carp;
use Data::Dumper;
use File::Path qw(remove_tree make_path);
use File::Slurp;
use Getopt::Long;
use HTML::Element::Library;

#TBD use HTML::Entities;
use HTML::TreeBuilder;

use JSON;
use Log::Log4perl qw(:easy);
use WWW::Mechanize;

#TBD use DateTime;
use Try::Tiny;
use feature qw( switch say );

#TBD use autodie ;
#TBD use Storable;
#TBD use IO::Zlib;

my $USE_LOCAL_DATA = 0;    # 1=Do not query web site.
our $VERSION = '0.10';

# Initialize
my $source_name = "wsj";
my $domain_name = "wsj.com";
my $rootdir     = "/home/clpoda";

my $outputdir = "p/WebScrape/data/wsj/lte";    #CFG
my $msg;

# Initialize
my $program = $0;
$program =~ s{\A.*/}{};    # strip leading path, if any
my $now = localtime;

#
# Raw data dir, eg, ./, /tmp, /var/tmp, ~/tmp/raw
#ORG my $log_dir = "./";
my $log_dir  = "/home/clpoda/p/WebScrape/log/";
my $log_file = $log_dir . "$program.log";

#TBD # Name the $out_file later; it contains a time stamp.
#TBD my $out_file;
#
my $data_src = "unknown, maybe __DATA__";

# Set up logging.
Log::Log4perl->easy_init(
  {

    #OK level => $INFO,
    #OK level  => $WARN,
    level => $DEBUG,
    file  => ">>$program.log"
  }
);

my $start_url
    = qq{http://online.wsj.com/public/page/letters.html};    #CFG
unless ( GetOptions( 'start_url=s' => \$start_url, ) ) {
  die usage();
}
unless ($start_url) {
  die
      "$program died: No url found in file or on command line.\n\n",
      usage();
}

my $mech = WWW::Mechanize->new();
$mech->agent_alias('Linux Mozilla');

#TBD Based on Index.pm modulino code, Sun2012_0318_16:46: keep or toss?
__PACKAGE__->new->run unless caller;

sub run { #------------------------------------------------------
  my ($application) = @_;
  my $start_time = localtime();

  DEBUG("Started run() at $start_time");

  ##
  ## Initialize --------------------------------------------------
  my $total_letters_count = 0;

  init_dirs( $rootdir, $outputdir );

  ##TMP1 print "   $0: See results at $rootdir/$outputdir when done.\n";
  ##TMP1 print "   $0: See log data at /home/clpoda/p/WebScrape/log/. \n\n";

  ##OPT-DBG
  my $raw_dir = "$rootdir/p/WebScrape/data/wsj/tmp";
  if ( -d $raw_dir ) {
    remove_tree($raw_dir);
  }
  make_path($raw_dir);

  ##
  ## Get start page w/ data.  ------------------------------------
  my $start_page;
  my $tree;
  if ($USE_LOCAL_DATA) {
    ## Read the local file into $start_page for correct handling
    ## of raw data, regardless of which branch is taken.
    $start_page = read_file(
      "$rootdir/p/WebScrape/data/wsj/wsj.lte.html");
    $tree = HTML::TreeBuilder->new_from_content($start_page);
    $data_src = "local copy of web page";
  }
  else {
    $start_page = get_start_page( $mech, $start_url );
    $tree = HTML::TreeBuilder->new_from_content($start_page);
    $data_src = "web";
  }

  ##TBD Verify page title: </script><title>Letters - WSJ.com</title>

  ##DBG:
  save_raw_data( $source_name, $raw_dir, $start_page, $tree );

  ##
  ## Parse the response & extract desired data. ------------------
  ##   Select the portion of the page that holds our data.
  ##   Extract each headline & store them in @topics.
  ##   Extract each sibling node from the tree.
  ##   TBD: Parse the text for data: heading, article, letter body, etc.
  my @all_letters_to_editor;
  my @topics = extract_topics($tree);

  my $topic_parent = $tree->look_down(
    _tag  => 'div',
    class => "",
  );

  my @lines_under_a_topic;
  my $topic_number = 0;
  my $topic_start;

  ## Loop on each topic. -----------------------------------------
TOPIC:
  foreach (@topics) {
    my $current_topic = $_->{_content}[0];
    $current_topic =~ s/\s+$//;
    say "DBG topic: ", $current_topic;

    ##TBD Make the sub a pattern match? Using the exact heading
    ## may cause a problem.
    ##
    ## Use as_text() method instead of as_HTML(); the latter
    ## caused failures when $topic_start included an apostrophe
    ## that must be escaped (may fail w/ other symbols too).
    $topic_start = $topic_parent->look_down(
      _tag => 'h1',
      sub { $_[0]->as_text =~ qr{$current_topic}i }
    );

    ##TBR? Catch problems.  Used for debug; maybe rm it now.
    if ($topic_start) {
      @lines_under_a_topic = $topic_start->siblings;
      $topic_number++;
    }
    else {
      DEBUG
          "\$topic_start not found for \$topic_number: ,$topic_number,";
      $topic_number++;
      next TOPIC;
    }

    my $author_data         = '';
    my $current_author      = '';
    my $current_letter_text = '';
    my %current_letter      = ();
    my $details;
    my $prior_author = '';
    #TBR my @structured_letters;
LINE:

    foreach (@lines_under_a_topic) {

      if ($_) {

        # DBG Save each line for debug.
        push @all_letters_to_editor,
            { letter_content => $_->as_text };

        # Save objects for analysis:
        $current_letter_text .= $_->as_text;
      }
      else {
        next LINE;
      }
      ##TBD Check for author first, then for author data.
      if ( $_->as_HTML =~ /<b>/ ) {
        $current_author = $_->as_text;
        $current_letter{authors}{name} = $current_author;

        ## Assume the <b> tag marks end of letter body.
        $current_letter{body} = $current_letter_text;

        ## Clear the var to prepare for next letter.
        $current_letter_text = '';
        $current_letter{topic} = $current_topic;

        ## TBD Get remaining content as (one or more) author's data.
          ## <b> author name
          ## <i> author data
          ## If next line is <i>, save as author data until no more <i> tags.
          ## If next line is <b>, save as next author name; repeat until no more <b>.*<i>.* tags.
          ## When no more <i> tags are found, the current letter is finished.
          ## If next line is <p> w/o <b>, next letter has been found.
          ## Else no more letters under this topic.
        ##
        ##
        ## TBD This is a count of authors, not letters or items
        ## on the page.  How an it be improved?
        ## Won't yet include Clarifications, Corrections.
        ##
        ## TBD Handle the case of an item w/ > 1 author,
        ## or w/ 0 authors.
        $total_letters_count++;
        say "DBG letter count: ", $total_letters_count;
        next LINE;
      }

      ##TBF How to ignore <i> tags inside letter body, & to use them
      ## after the <b> tag?
      ##   i.1. Check $current_author before entering loop;
      ##   and clear $current_author after each letter is finished.
      ## TBD Clear $current_author after each letter is finished.
      ## TBD Clear details after each letter is finished.
      ## i.2. A new letter is started when $current_author changes.
      ##
      elsif ( $_->as_HTML =~ /<i>/ and $current_author ) {
        if ( $current_author ne $prior_author ) {

          # Found a new letter.
          $current_letter{authors}{details} = ();
          $prior_author = $current_author;
        }

        ##
        ## TBD How to detect when last <i> tag for a letter has been seen,
        ## & then push the %current_letter to AoH of letters for this topic?
        ## Is this code OK, or will it add redundant entries when more than one
        ## <i> tag for a letter is found?:

        ## Clear this var in this block also, to prevent wrong
        ## data from being stored.
        $current_letter_text = '';

        $author_data = $_->as_text;
        push @{ $current_letter{authors}{details} },
            $author_data;

        ## Write each letter to a separate file.
        ## Overwrite the file as each new <i> tag is found,
        ## and the last file written for that letter should have
        ## all its data.
        ## TBD Obtain & use the correct values in the path:
        write_file(
          "./wsj/2012/mmdd/$total_letters_count",
          { binmode => ':utf8' },
          encode_json( \%current_letter )
            )
            or DEBUG( 'save_one_letter_data', $!, $source_name );
      }

    }    # End foreach LINE loop.
  }    # End foreach TOPIC loop.

  ##---------------------------------------------------------------
  ## Save data from all letters found.
  write_file( "all_letters", "" );
  foreach (@all_letters_to_editor) {
    append_file( "all_letters", { binmode => ':utf8' },
      values %$_ )
        or DEBUG( 'save_letters_data', $!, $source_name );
    append_file( "all_letters", { binmode => ':utf8' }, "\n" );
  }

  ##---------------------------------------------------------------
  ## Print summary stats at end of the program.
  $tree->delete;

  my $done_time = localtime();
  my ($end_msg1);
  $end_msg1
      = "$0\n"
      . "  using data src ,$data_src,\n"
      . "  ran from $start_time to $done_time.\n"
      . "  Found ,$total_letters_count, letters to the editor in $source_name.\n";

  DEBUG($end_msg1);
  print { $application->{output_fh} } $end_msg1 . "\n";

}    # End of run().

exit 1;

#
#
# Subroutines ---------------------------------------------------
#
#
sub new { #------------------------------------------------------
  my ($class) = @_;
  my $application = bless {}, $class;
  $application->init;
  $application;
}

sub init { #-----------------------------------------------------
  ## TBD Add some or all init code here later.
  my ($application) = @_;
  $application->{output_fh} = \*STDOUT;
}

sub output_fh { #------------------------------------------------
  my ( $application, $fh ) = @_;
  if ($fh) {
    $application->{output_fh} = $fh;
  }
  $application->{output_fh};
}

sub usage { #----------------------------------------------------
  return <<"eousage";
Usage:
  $program -u url

$program requests a web site to return a page, and displays
the HTML data found there.

Options to control the query

-url string              The full http address to retrieve.
                         Required.
eousage
}

sub init_dirs { #------------------------------------------------
  my ( $rootdir, $outputdir ) = @_;
  if ( -d "$rootdir/$outputdir" ) {
    remove_tree("$rootdir/$outputdir");
  }
  make_path("$rootdir/$outputdir");
}

sub get_start_page { #-------------------------------------------
  my ( $mech, $start_url ) = @_;
  my $response;
  try {
    $response = $mech->get($start_url);
  }
  catch {
    my $msg = "ERR: DIE: Caught error while getting web page: $_"
        . "  response->status_line: [$response->status_line].";
    DEBUG( 'NoShow', $msg, $source_name );
    die "ERR: Cannot get web page [$start_url]; try later.";
  };

  if ( !$response->is_success ) {
    my $msg = "Bad response to request for [$start_url]: "
        . $response->status_line;
    DEBUG( 'NoShow', $msg, $source_name );
    die
        "ERR: Got bad response to request for [$start_url]; try later.";
  }
  return $mech->content();
}

sub save_raw_data { #--------------------------------------------
  my ( $source_name, $raw_dir, $start_page, $tree ) = @_;

  ## Save structured view of web page.
  my $treeout;
  open( $treeout, '>', "$raw_dir/wsj.lte.treedump" );
  binmode $treeout, ':utf8';
  $tree->dump($treeout);
  close($treeout);

  ## Save raw downloaded page & decoded content for debugging.
  my $page_file = "$source_name.lte.raw";
  write_file( "$raw_dir/$page_file", { binmode => ':utf8' },
    $start_page )
      or DEBUG( 'save_raw_data()', $!, $source_name );
  write_file( "tree_builder_dump_as_html", $tree->as_HTML )
      or DEBUG( 'save_raw_data()', $!, $source_name );
  write_file( "tree_builder_dump_as_text",
    { binmode => ':utf8' },
    $tree->as_text )
      or DEBUG( 'save_raw_data()', $!, $source_name );
}

sub extract_topics { #-------------------------------------------
  my $tree   = shift;
  my @topics = $tree->look_down(
    '_tag'  => 'h1',
    'class' => 'boldEighteenTimes',
  );
  $Data::Dumper::Maxdepth = 2;    # 2 shows content
  ##DBG say "\nDBG \@topics:";

  ##DBG say Dumper @topics;
  return @topics;
}

sub extract_letters { #------------------------------------------
  say "DBG extract_letters()";
  my $topic        = shift;
  my $letter_group = $topic->parent->look_down( '_tag' => 'p', );
  my @letters      = $letter_group->siblings;
  $Data::Dumper::Maxdepth = 2;    # 2 shows content
  say "\nDBG \@letters:";

  #DBG say Dumper @letters;
  return @letters;
}

sub extract_one_letter_to_editor { #-----------------------------
  my $letter = shift;

  #TBD3  my @letter_contents = $letter->parent->look_down(
  my @letter_contents = $letter->look_down( '_tag' => 'p', );

  # Collect a list of paragraphs of each letter.
  # my @letter_paragraphs =
  # $letter_headline->parent->look_down( "_tag" => "p", );

  foreach (@letter_contents) {

    #F say "DBG One Para:\n", dump $_;
    #DBG say "DBG One Para:\n";
    $Data::Dumper::Maxdepth = 2;    # 2 shows content of letters.
                                    #DBG say Dumper ($_);
  }

  ## HTML on the page to match:
  ## TBD
#TBD if ($letter_headline) {
#TBD ( $ep_element_6, $hex_id, $show_id ) = $letter_headline->parent->as_HTML =~
#TBD m{.* 'Full.Episodes','(.*?)', \s* (.*?), \s* (\d+?),  .*}ix;
#TBD }
#TBD else {
#TBD return ( 0, 0, 0 );
#TBD }

  return @letter_contents;
}

